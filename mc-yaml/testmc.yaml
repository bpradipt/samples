apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: kata-oc
    app: example-kataconfig
  name: 40-worker-kata-remote-config
spec:
  config:
    ignition:
      version: 2.2.0
    storage:
      files:
      - contents:
        source: data:text/plain;charset=utf-8;base64,
        filesystem: root
        mode: 0644
        path: /opt/kata/configuration-remote.toml
